version: 0.0.3
title: Apache HTTP Server
description: Log parser for Apache HTTP Server
parameters:
  - name: enable_error_log
    label: Error Logs
    description: Enable to collect Apache HTTP Server error logs
    type: bool
    default: true
  - name: error_log_path
    label: Error Log Path
    description: Path to error log file
    type: string
    default: "/var/log/apache2/error.log"
    relevant_if:
      enable_error_log:
        equals: true
  - name: enable_access_log
    label: Access Logs
    description: Enable to collect Apache HTTP Server access logs
    type: bool
    default: true
  - name: access_log_path
    label: Access Log Path
    description: Path to access log file
    type: string
    default: "/var/log/apache2/access.log"
    relevant_if:
      enable_access_log:
        equals: true
  - name: start_at
    label: Start At
    description: Start reading file from 'beginning' or 'end'
    type: enum
    valid_values:
     - beginning
     - end
    default: end

# Set Defaults
#{{$enable_error_log := default true .enable_error_log}}
#{{$error_log_path := default "/var/log/apache2/error.log" .error_log_path}}
#{{$enable_access_log := default true .enable_access_log}}
#{{$access_log_path := default "/var/log/apache2/access.log" .access_log_path}}
#{{$start_at := default "end" .start_at}}

pipeline:
  #{{ if $enable_access_log }}
  - id: access_log_reader
    type: file_input
    include:
      - {{ $access_log_path }}
    start_at: {{ $start_at }}
    labels:
      log_type: 'apache_http.access'
      plugin_id: {{ .id }}

  - id: access_regex_parser
    type: regex_parser
    regex: '^(?P<remote>[^ ]*) (?P<host>[^ ]*) (?P<user>[^ ]*) \[(?P<time>[^\]]*)\] "(?P<method>\S+)(?: +(?P<path>[^\"]*?)(?: +\S*)?)?" (?P<code>[^ ]*) (?P<size>[^ ]*)(?: "(?P<referer>[^\"]*)" "(?P<agent>[^\"]*)"(?:\s+(?P<http_x_forwarded_for>[^ ]+))?)?'
    timestamp:
      parse_from: time
      layout: '%d/%b/%Y:%H:%M:%S %z'
    output: access_agent_router
    severity:
      parse_from: code
      preset: none
      preserve_to: code
      mapping:
        info: 2xx
        notice: 3xx
        warning: 4xx
        error: 5xx

  # Router to determine if agent field can be parsed.
  - id: access_agent_router
    type: router
    routes:
      - expr: '$record.agent != nil and $record.agent matches "^(?P<client>[^/]*)/(?P<client_version>[^ ]*) (\\((?P<system>[^;]*);([^\\)]*)\\))?(.*)?"'
        output: access_agent_parser
      - expr: true
        output: {{ .output }}

  # Parse agent field
  - id: access_agent_parser
    type: regex_parser
    regex: '^(?P<client>[^/]*)/(?P<client_version>[^ ]*) (\((?P<system>[^;]*);([^\)]*)\))?(.*)?'
    parse_from: agent
    preserve_to: agent
    output: {{ .output }}
  #{{ end }}

  #{{ if $enable_error_log }}
  - id: error_log_reader
    type: file_input
    include:
      - {{ $error_log_path }}
    start_at: {{ $start_at }}
    multiline:
      line_start_pattern: '\[(?P<time>\w+ \w+ \d{2} \d{2}:\d{2}:\d{2}\.\d+ \d+)\] '
    labels:
      log_type: 'apache_http.error'
      plugin_id: {{ .id }}

  - id: error_regex_parser
    type: regex_parser
    regex: '^\[(?P<time>\w+ \w+ \d{2} \d{2}:\d{2}:\d{2}\.\d+ \d+)\] \[(?P<module>\w+):(?P<log_level>[\w\d]+)\] \[pid (?P<pid>\d+)(?::tid (?P<tid>[\d]+))?\](?: \[client (?P<client>[^\]]*)\])? (?P<error_code>[^:]+): (?P<message>.*)'
    timestamp:
      parse_from: time
      layout: '%a %b %d %T.%s %Y'
    severity:
      parse_from: log_level
      mapping:
        critical: crit
        emergency: emerg
        warning: warn
        trace:
          - trace1
          - trace2
          - trace3
          - trace4
          - trace5
          - trace6
          - trace7
          - trace8
    output: {{ .output }}
  #{{ end }}
